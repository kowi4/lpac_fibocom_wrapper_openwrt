#!/bin/sh
AT_DEVICE="${AT_DEVICE:-/dev/ttyUSB3}"  # Use environment variable or default to /dev/ttyUSB3
LOG_FILE="/tmp/lpac_wrapper.log"
SEXPECT_SOCK="/tmp/lpac_sexpect_sock.$$"
OUTPUT_FILE="/tmp/lpac_output.$$"

# Initialize files
: > "$OUTPUT_FILE"

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
}

cleanup() {
    sexpect -sock "$SEXPECT_SOCK" close 2>/dev/null
    rm -f "$SEXPECT_SOCK" "$OUTPUT_FILE" /tmp/lpac_channellId
    exit 0
}
trap cleanup INT TERM

send_at_command() {
    log "AT >>> $1"
    response=$(sms_tool -D -d "$AT_DEVICE" at "$1" 2>/dev/null)
    log "AT <<< $response"
    echo "$response"
}

handle_apdu() {
    case "$1" in
        "connect") echo '{"ecode":0}' ;;
        "disconnect") echo '{"ecode":0}' ;;
        "logic_channel_open")
            [ -z "$2" ] && { echo '{"ecode":-1}'; return; }
            response=$(send_at_command "AT+CCHO=\"$2\"")
            
            # Extract channel ID from response
            channellId=$(echo "$response" | 
                tr -d '\r' |
                grep -v '^AT' |
                grep -v '^$' |
                awk '/^[0-9]+$/ {print $0; exit}')
            
            # Verify response contains OK
            if [ -n "$channellId" ] && echo "$response" | grep -q 'OK'; then
                echo "$channellId" > /tmp/lpac_channellId
                echo "{\"ecode\":$channellId}"
            else
                echo '{"ecode":-1}'
            fi
            ;;
        "logic_channel_close")
            channellId=$(cat /tmp/lpac_channellId 2>/dev/null || echo "-1")
            [ "$channellId" -ne -1 ] && send_at_command "AT+CCHC=$channellId" >/dev/null
            echo "-1" > /tmp/lpac_channellId
            echo '{"ecode":0}'
            ;;
        "transmit")
            channellId=$(cat /tmp/lpac_channellId 2>/dev/null || echo "-1")
            [ -z "$2" ] || [ "$channellId" -eq -1 ] && { echo '{"ecode":-1}'; return; }
            response=$(send_at_command "AT+CGLA=$channellId,${#2},\"$2\"")
            data=$(echo "$response" | sed -n 's/^+CGLA: [0-9]\+,"\([^"]*\)".*/\1/p')
            echo "{\"ecode\":0,\"data\":\"$data\"}"
            ;;
        *) echo '{"ecode":-1}' ;;
    esac
}

# Main execution
log "Starting lpac with sexpect"
log "Using AT device: $AT_DEVICE"
sexpect -sock "$SEXPECT_SOCK" spawn -timeout 30 lpac "$@"

while :; do
    log "Waiting for lpac output..."
    
    # Wait for data with timeout
    sexpect -sock "$SEXPECT_SOCK" expect -timeout 3600 -re '.+'
    ret=$?
    
    # Check for timeout/EOF
    if [ $ret -ne 0 ]; then
        if sexpect -sock "$SEXPECT_SOCK" chkerr -errno $ret -is eof; then
            log "Received EOF from lpac"
            
            # Display collected output at the end
            if [ -s "$OUTPUT_FILE" ]; then
                echo -e "${GREEN}$(cat "$OUTPUT_FILE")${NC}"
            fi
            
            break
        fi
        continue
    fi
    
    # Get all received data
    data=$(sexpect -sock "$SEXPECT_SOCK" expect_out -index 0)
    
    # Process each line separately
    echo "$data" | while IFS= read -r line; do
        [ -z "$line" ] && continue
        
        # Skip our own responses (containing "ecode" but not "func")
        if echo "$line" | grep -q '"ecode"' && ! echo "$line" | grep -q '"func"'; then
            continue
        fi
        
        log "RECV <<< $line"
        
        if json_type=$(jsonfilter -s "$line" -e '@.type' 2>/dev/null); then
            if [ "$json_type" = "apdu" ]; then
                func=$(jsonfilter -s "$line" -e '@.payload.func')
                param=$(jsonfilter -s "$line" -e '@.payload.param')
                
                if [ -n "$func" ]; then
                    response=$(handle_apdu "$func" "$param")
                    full_response="{\"type\":\"apdu\",\"payload\":$response}"
                    log "SEND >>> $full_response"
                    
                    # Send response
                    sexpect -sock "$SEXPECT_SOCK" send -- "$full_response"
                    sexpect -sock "$SEXPECT_SOCK" send -enter
                fi
            elif [ "$json_type" = "lpa" ]; then
                if command -v jq >/dev/null 2>&1; then
                    # Store LPA message in output file (pretty-printed)
                    echo "$line" | jq '.' >> "$OUTPUT_FILE"
                else
                    echo "$line" >> "$OUTPUT_FILE"
                fi
            fi
        else
            # Store non-JSON lines in output file
            echo "$line" >> "$OUTPUT_FILE"
        fi
    done
done

cleanup
